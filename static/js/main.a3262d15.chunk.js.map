{"version":3,"sources":["components/Card.js","components/cardContent.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","style","display","marginLeft","this","props","x","marginTop","y","backgroundColor","color","boxShadow","title","desc","Component","cardContent","id","App","myCards","map","card","key","type","name","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAsBeA,E,uKAlBb,OACC,yBAAKC,UAAU,OAAOC,MAAO,CAC5BC,QAAY,WACZC,WAAYC,KAAKC,MAAMC,EACvBC,UAAYH,KAAKC,MAAMG,EACvBC,gBAAiBL,KAAKC,MAAMK,MAC5BC,UAAW,CACV,oBACA,aAAeP,KAAKC,MAAMK,SAG3B,4BAAMN,KAAKC,MAAMO,OACjB,2BAAKR,KAAKC,MAAMQ,W,GAdDC,aCiCJC,EAnCK,CAClB,CACEC,GAAO,IACPJ,MAAO,QACPC,KAAO,mBACPP,EAAO,QACPE,EAAO,OACPE,MAAO,WAET,CACEM,GAAO,IACPJ,MAAO,KACPC,KAAO,mBACPP,EAAO,QACPE,EAAO,QACPE,MAAO,WAET,CACEM,GAAO,IACPJ,MAAO,cACPC,KAAO,yBACPP,EAAO,QACPE,EAAO,QACPE,MAAO,WAET,CACEM,GAAO,IACPJ,MAAO,qBACPC,KAAO,+EACPP,EAAO,QACPE,EAAO,OACPE,MAAO,YCMIO,G,6KA3Bb,IAAMC,EAAUH,EAAYI,KAAI,SAAAC,GAAI,OACnC,kBAAC,EAAD,CACCC,IAAKD,EAAKJ,GACVJ,MAAOQ,EAAKR,MACZC,KAAMO,EAAKP,KACXP,EAAGc,EAAKd,EACRE,EAAGY,EAAKZ,EACRE,MAAOU,EAAKV,WAGd,OACC,yBAAKV,UAAU,cACd,yBAAKA,UAAU,iBACd,8BACC,yBAAKA,UAAU,eACd,2BAAOsB,KAAK,OAAOC,KAAK,QAAQC,YAAY,UAC5C,4BAAQF,KAAK,UAAb,MAED,8BAAUC,KAAK,OAAOC,YAAY,kBAGnCN,O,GAxBaJ,cCKEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a3262d15.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass Card extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"card\" style={{\n\t\t\t\tdisplay   : 'absolute',\n\t\t\t\tmarginLeft: this.props.x,\n\t\t\t\tmarginTop : this.props.y,\n\t\t\t\tbackgroundColor: this.props.color,\n\t\t\t\tboxShadow: [\n\t\t\t\t\t\"0 0 0 1px #747547\",\n\t\t\t\t\t\"0 0 0 3px \" + this.props.color\n\t\t\t\t]\n\t\t\t}}>\n\t\t\t\t<h1>{ this.props.title }</h1>\n\t\t\t\t<p>{ this.props.desc }</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Card","const cardContent = [\n  {\n    id   : 433,\n    title: 'Hello',\n    desc : 'What\\'s your name',\n    x    : '444px',\n    y    : '56px',\n    color: '#ff684d'\n  },\n  {\n    id   : 434,\n    title: 'Hi',\n    desc : 'Nice to meet you',\n    x    : '277px',\n    y    : '131px',\n    color: '#4dc0d0'\n  },\n  {\n    id   : 435,\n    title: 'Lorem ipsum',\n    desc : '... dolor sit amet ...',\n    x    : '433px',\n    y    : '333px',\n    color: '#ffcd5a'\n  },\n  {\n    id   : 436,\n    title: 'Messages from mom.',\n    desc : 'Don\\'t forget to drink your milk every morning. Thank you, mom. I love you...',\n    x    : '733px',\n    y    : '13px',\n    color: '#8bca4d'\n  },\n]\n\nexport default cardContent","import React, {Component} from 'react';\n// import logo from './logo.svg';\n\nimport Card from './components/Card'\nimport cardContent from './components/cardContent'\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\n\t\tconst myCards = cardContent.map(card => \n\t\t\t<Card\n\t\t\t\tkey={card.id}\n\t\t\t\ttitle={card.title}\n\t\t\t\tdesc={card.desc}\n\t\t\t\tx={card.x}\n\t\t\t\ty={card.y}\n\t\t\t\tcolor={card.color}\n\t\t\t/>)\n\n\t\treturn (\n\t\t\t<div className=\"card-group\">\n\t\t\t\t<div className=\"card card-add\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div className=\"form-inline\">\n\t\t\t\t\t\t\t<input type=\"text\" name=\"title\" placeholder=\"Title\" />\n\t\t\t\t\t\t\t<button type=\"submit\">+</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<textarea name=\"desc\" placeholder=\"Description\"></textarea>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t{myCards}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}